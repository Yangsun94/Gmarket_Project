name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout 코드
      uses: actions/checkout@v4

    - name: Python 설정
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 코드 품질 도구 설치
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pylint isort

    - name: 코드 포맷 검사 (Black)
      run: |
        echo "코드 포맷팅이 올바른지 검사합니다..."
        echo "로컬에서 'black framework/ tests/ --line-length=120'를 실행하세요"
        black --check framework/ tests/ --line-length=120 --diff

    - name: Import 정렬 검사 (isort)
      run: |
        echo "Import 정렬이 올바른지 검사합니다..."
        echo "로컬에서 'isort framework/ tests/ --profile black'을 실행하세요"
        isort --check-only framework/ tests/ --profile black --diff

    - name: 코드 스타일 검사 (Flake8)
      run: |
        echo "PEP 8 스타일 가이드를 따르는지 검사합니다..."
        flake8 framework/ tests/ --max-line-length=120 --extend-ignore=E203,W503,E501 --statistics
      continue-on-error: true

    - name: 코드 품질 분석 (Pylint)
      run: |
        echo "코드 품질을 분석합니다 (목표: 7.0/10.0 이상)..."
        pylint framework/ --fail-under=7.0 --max-line-length=120 || echo "Pylint 점수가 7.0 미만입니다"
      continue-on-error: true

    - name: 품질 검사 요약
      if: always()
      run: |
        echo "코드 품질 검사 완료"
        echo ""
        echo "로컬에서 자동 수정 방법:"
        echo "  black framework/ tests/ --line-length=120"
        echo "  isort framework/ tests/ --profile black"
        echo ""
        echo "Pre-commit Hook 설치:"
        echo "  pip install pre-commit"
        echo "  pre-commit install"

  security-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout 코드
      uses: actions/checkout@v4

    - name: Python 설정
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 보안 취약점 검사 (Safety)
      run: |
        echo "알려진 보안 취약점을 검사합니다..."
        pip install safety
        pip install -r requirements.txt
        safety check --json || echo "보안 취약점이 발견되었습니다"
      continue-on-error: true

    - name: 보안 검사 요약
      if: always()
      run: |
        echo "✅ 보안 검사 완료"
        echo ""
        echo "💡 취약점이 발견된 경우:"
        echo "  pip install --upgrade [패키지명]"